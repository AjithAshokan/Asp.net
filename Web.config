ConnectionString

<connectionStrings>
    <add name="ConNew" connectionString="Data Source=111.11.11;Initial Catalog=Database;Persist Security Info=True;User ID=sa;Password=password" />
  </connectionStrings>
  
  
  in .cs
  
  public static string constr = ConfigurationManager.ConnectionStrings["ConNew"].ConnectionString;
  
For INsertion

   [WebMethod]
        public static string SubmitBidValue(int taskId, int bidderId, int bidValue)
        {
            try
            {
                using (SqlConnection con = new SqlConnection(constr))
                {
                    using (SqlCommand submitBidCmd = new SqlCommand("dbo.USPInsertBid"))
                    {
                        submitBidCmd.CommandType = CommandType.StoredProcedure;
                        submitBidCmd.Parameters.AddWithValue("@TaskId", taskId);
                        submitBidCmd.Parameters.AddWithValue("@BidderId", bidderId);
                        submitBidCmd.Parameters.AddWithValue("@BidValue", bidValue);
                        submitBidCmd.Connection = con;
                        con.Open();
                        int retVal = submitBidCmd.ExecuteNonQuery();
                        if (retVal == 0)
                        {
                            return "true";
                         
                        }
                        else
                        {
                            return "false";
                            
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine("Error : " + e);
            }
            
            return "false";
        }



For Reterving Details From Db

[WebMethod]
        public static string BidLists(int taskId)
        {
            DataTable viewTable;
            try
            {
                using (SqlConnection con = new SqlConnection(constr))
                {
                    using (SqlCommand bidListCmd = new SqlCommand("dbo.USPGetBiddingDetails"))
                    {
                        bidListCmd.CommandType = CommandType.StoredProcedure;
                        bidListCmd.Parameters.AddWithValue("@ProjectId", taskId);
                        bidListCmd.Connection = con;
                        con.Open();
                        using (SqlDataReader reader = bidListCmd.ExecuteReader())
                        {
                            if (reader.HasRows)
                            {
                                viewTable = new DataTable();
                                viewTable.Load(reader);
                                return JsonConvert.SerializeObject(viewTable);
                            }
                            else
                            {
                                return string.Empty;
                            }
                        }
                    }
                }
            }

            catch (Exception ex)
            {
                Console.WriteLine("Error"+ex);
            }
            
            return string.Empty;
        }
